#ifndef DISPLAY_H
#define DISPLAY_H
/////////////////////////////////////////////////////////////////////////////
// Display.h																   
// MaxiJonson															   
// December 15 2016														   
// Contains all display related functions and elements					   	
/////////////////////////////////////////////////////////////////////////////
#include <string>
#include <SDL.h>
#include <SDL_image.h>
#include <SDL_ttf.h>
using namespace std;

/*
Here's how the display components need to be used:
1. You must always InitializeDisplay before using anything else. This function is core to ALL other modules. You cannot do ANYTHING SDL related without this. No Audio, No Keyboard, etc.
2. Use LoadBmp (.bmp) to load an image file
3. You can now use ShowImage to show an already loaded file
4. Remember to use CloseDisplay to free image ressources

Protip:
you can show an image file with just one line by combining ShowImage and LoadBmp all together:
ShowImage(LoadBmp("trolled.bmp"), 13, 37);
*/

///////////////////////////////////////////////////////////////////////////////
// Data type to store images number
///////////////////////////////////////////////////////////////////////////////
typedef int ImageId;


/////////////////////////////////////////////////////////////////////////////
// InitializeDisplay
// Initializes SDL video components
// Params :	Window Title
//			width of window
//			height of window
// Returns: None
/////////////////////////////////////////////////////////////////////////////
void InitializeDisplay(string windowTitle, int width, int height);



/////////////////////////////////////////////////////////////////////////////
// Fullscreen
// Sets the window to fullscreen
// Params :	None
// Returns: None
/////////////////////////////////////////////////////////////////////////////
void Fullscreen();



/////////////////////////////////////////////////////////////////////////////
// Wait
// Makes the program delay
// Params :	Time of delay (ms)
// Returns: None
/////////////////////////////////////////////////////////////////////////////
void Wait(int time);



/////////////////////////////////////////////////////////////////////////////
// FillWindow
// Fills the window with a color
// Params :	Red amount
//			Green amount
//			Blue amount
//			Alpha (default: 255)
// Returns: None
/////////////////////////////////////////////////////////////////////////////
void FillWindow(int red, int green, int blue, int alpha = 255);



/////////////////////////////////////////////////////////////////////////////
// LoadBmp
// Loads a bmp file with a transparency key
// Params :	File Name
//			Red amount (transparency) (defaults to 0 - Black)
//			Green amount (transparency) (defaults to 0 - Black)
//			Blue amount (transparency) (defaults to 0 - Black)
// Returns: Image number id
/////////////////////////////////////////////////////////////////////////////
ImageId LoadBmp(string FileName, int red = 0, int green = 0, int blue = 0);



/////////////////////////////////////////////////////////////////////////////
// ShowImage
// Shows an image (window must be refreshed after this so the user can show)
// Params :	Image number ID
//			X Position
//			Y Position
//			The resize factor (default = 0)
// Returns: None
/////////////////////////////////////////////////////////////////////////////
void ShowImage(ImageId Image, int PosX, int PosY, int resize = 0);



///////////////////////////////////////////////////////////////////////////////
// Refresh
// Refreshes the window with the images shown in ShowImage
// Params : None
// Returns: None
///////////////////////////////////////////////////////////////////////////////
void Refresh();



///////////////////////////////////////////////////////////////////////////////
// CloseDisplay
// Closes all video components of SDL
// Params : None
// Returns: None
///////////////////////////////////////////////////////////////////////////////
void CloseDisplay();



///////////////////////////////////////////////////////////////////////////////
// FreeImages
// Very usefull when loading images into functions to prevent memory leaks. This
// function let's you free the surfaces and textures inside the Images and Textures
// vector, freeing space in the memory
// Params: None
// Returns: None
///////////////////////////////////////////////////////////////////////////////
void FreeImages();



///////////////////////////////////////////////////////////////////////////////
// GetImageRect
// Returns the width and height of an image
// Params: Image ID
// Returns: Rectangle with Width and Height
///////////////////////////////////////////////////////////////////////////////
SDL_Rect GetImageRect(ImageId image, int resize = 0);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////// TEXT ////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This part was added after realizing that the Text module needed the same renderer and window to work in the same window. Otherwise it had to have it's own seperate renderer (performance
// issues) and window (quality issues)


/////////////////////////////////////////////////////////////////////////////
// Represents a font ID		   	
/////////////////////////////////////////////////////////////////////////////
typedef int FontId;


/////////////////////////////////////////////////////////////////////////////
// Represents a text ID		   	
/////////////////////////////////////////////////////////////////////////////
typedef int TextId;



/////////////////////////////////////////////////////////////////////////////
// Represents an alphabet ID		   	
/////////////////////////////////////////////////////////////////////////////
typedef int AlphaId;



/////////////////////////////////////////////////////////////////////////////
// Represents images of an alphabet   	
/////////////////////////////////////////////////////////////////////////////
struct Alphabet
{
	ImageId a;
	ImageId b;
	ImageId c;
	ImageId d;
	ImageId e;
	ImageId f;
	ImageId g;
	ImageId h;
	ImageId i;
	ImageId j;
	ImageId k;
	ImageId l;
	ImageId m;
	ImageId n;
	ImageId o;
	ImageId p;
	ImageId q;
	ImageId r;
	ImageId s;
	ImageId t;
	ImageId u;
	ImageId v;
	ImageId w;
	ImageId x;
	ImageId y;
	ImageId z;
	ImageId zero;
	ImageId one;
	ImageId two;
	ImageId three;
	ImageId four;
	ImageId five;
	ImageId six;
	ImageId seven;
	ImageId eight;
	ImageId nine;
	ImageId dot;
	ImageId colon;
	ImageId dollar;
	ImageId plus;
	ImageId dash;
};



///////////////////////////////////////////////////////////////////////////////
// InitializeTTF
// Initializes the TTF engine
// Params :	None
// Returns: None
///////////////////////////////////////////////////////////////////////////////
void InitializeTTF();



///////////////////////////////////////////////////////////////////////////////
// LoadFont
// Loads a font into memory
// Params :	File Name (.ttf recommended, .otf not proven to always work)
//			Font size (default: 20)
// Returns: Font ID number
///////////////////////////////////////////////////////////////////////////////
FontId LoadFont(string fileName, int fontSize = 20);



///////////////////////////////////////////////////////////////////////////////
// LoadText
// Loads a text surface into memory from a string
// Params :	Font to be used
//			Text string
//			Red Amount (default: 255)
//			Green Amount (default: 255)
//			Blue Amount (default: 255)
//			Outline size (default: 0 [None])
//			Outline Red Amount (default: 0)
//			Outline Green Amount (default: 0)
//			Outline Blue Amount (default: 0)
// Returns: Text ID number
///////////////////////////////////////////////////////////////////////////////
TextId LoadText(FontId font, string text, int red = 255, int green = 255, int blue = 255, int strokesize = 0, int strokeRed = 0, int strokeGreen = 0, int strokeBlue = 0);



///////////////////////////////////////////////////////////////////////////////
// ShowText
// Shows a text (must be placed before Refresh() to be able to see it)
// Params :	Text ID
//			X Position
//			Y Position
// Returns: None
///////////////////////////////////////////////////////////////////////////////
void ShowText(TextId text, int x, int y);



///////////////////////////////////////////////////////////////////////////////
// FreeText
// Frees all text surfaces
// Params :	None
// Returns: None
///////////////////////////////////////////////////////////////////////////////
void FreeText();



///////////////////////////////////////////////////////////////////////////////
// LoadAlphabet
// Loads images of an alphabet that is in a folder
// Params :	Folder name
//			Red amount that is considered as transparent
//			Green amount that is considered as transparent
//			Blue amount that is considered as transparent
// Returns: ID number of the alphabet
///////////////////////////////////////////////////////////////////////////////
AlphaId LoadAlphabet(string folderName, int alphaRed = 0, int alphaGreen = 0, int alphaBlue = 0);



///////////////////////////////////////////////////////////////////////////////
// ShowAlpha
// Shows a string from the images previously loaded with LoadAlphabet
// Params :	Text string
//			Alphabet to use
//			X position
//			Y position
//			Resize factor (default: 0)
//			X spacing between two images (default: 5)
//			Y spacing between two images (default: 0)
// Returns: None
///////////////////////////////////////////////////////////////////////////////
void ShowAlpha(string text, AlphaId alphabet, int posX, int posY, int resize = 0, int Xspacing = 5, int Yspacing = 0);



///////////////////////////////////////////////////////////////////////////////
// ShowLetter
// Shows a letter image from ShowAlpha
// --- This function should not be called by the user, but only by ShowAlpha.
//	   It is the same as ShowImage, but also returns a width and an height so
//	   there can be proper spacing between letters
// Params :	Text string
//			Alphabet to use
//			X position
//			Y position
//			Resize factor
//			Width of the letter
// Returns: None
///////////////////////////////////////////////////////////////////////////////
void ShowLetter(ImageId Image, int PosX, int PosY, int resize, int& width);
#endif // !DISPLAY_H
